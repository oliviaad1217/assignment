class Book:
    """Class representing a book in the library."""
    def __init__(self, book_id, title, author, genre, copies):
        # Initialize book details
        self.book_id = book_id
        self.title = title
        self.author = author
        self.genre = genre
        self.copies = copies

    def __str__(self):
        # Return a string representation of the book
        return f"{self.book_id}: {self.title} by {self.author} ({self.genre}) - {self.copies} copies available"

class User:
    """Class representing a library user."""
    def __init__(self, user_id, name):
        # Initialize user details
        self.user_id = user_id
        self.name = name
        self.borrowed_books = []  # List to track borrowed books

    def borrow_book(self, book_id):
        # Add the book to the user's borrowed books list
        self.borrowed_books.append(book_id)

    def return_book(self, book_id):
        # Remove the book from the user's borrowed books list
        if book_id in self.borrowed_books:
            self.borrowed_books.remove(book_id)

    def __str__(self):
        # Return a string representation of the user
        return f"User {self.user_id}: {self.name} - Borrowed books: {', '.join(map(str, self.borrowed_books)) if self.borrowed_books else 'None'}"

class Library:
    """Class managing the library system."""
    def __init__(self):
        # Initialize library with empty dictionaries for books and users
        self.books = {}  # Dictionary of book_id -> Book
        self.users = {}  # Dictionary of user_id -> User

    def add_book(self, book_id, title, author, genre, copies):
        """Add a book to the library."""
        try:
            if not isinstance(book_id, int) or not isinstance(copies, int):
                raise ValueError("Book ID and copies must be integers.")
            if book_id in self.books:
                print(f"Book ID {book_id} already exists. Updating copies.")
                self.books[book_id].copies += copies
            else:
                self.books[book_id] = Book(book_id, title, author, genre, copies)
            print(f"Book '{title}' added/updated successfully.")
        except ValueError as e:
            print(f"Error: {e}")

    def remove_book(self, book_id):
        """Remove a book from the library."""
        try:
            if book_id in self.books:
                del self.books[book_id]
                print(f"Book ID {book_id} removed successfully.")
            else:
                raise ValueError("Book ID does not exist.")
        except ValueError as e:
            print(f"Error: {e}")

    def register_user(self, user_id, name):
        """Register a new user in the library."""
        try:
            if not isinstance(user_id, int):
                raise ValueError("User ID must be an integer.")
            if user_id in self.users:
                print(f"User ID {user_id} already exists.")
            else:
                self.users[user_id] = User(user_id, name)
                print(f"User '{name}' registered successfully.")
        except ValueError as e:
            print(f"Error: {e}")

    def borrow_book(self, user_id, book_id):
        """Allow a user to borrow a book."""
        try:
            if user_id not in self.users:
                raise ValueError("User not registered.")
            if book_id not in self.books:
                raise ValueError("Book not found.")
            if self.books[book_id].copies <= 0:
                raise ValueError("No copies available.")

            self.users[user_id].borrow_book(book_id)
            self.books[book_id].copies -= 1
            print(f"User {user_id} borrowed book '{self.books[book_id].title}'.")
        except ValueError as e:
            print(f"Error: {e}")

    def return_book(self, user_id, book_id):
        """Allow a user to return a borrowed book."""
        try:
            if user_id not in self.users:
                raise ValueError("User not registered.")
            if book_id not in self.books:
                raise ValueError("Book not found.")

            self.users[user_id].return_book(book_id)
            self.books[book_id].copies += 1
            print(f"User {user_id} returned book '{self.books[book_id].title}'.")
        except ValueError as e:
            print(f"Error: {e}")

    def search_books(self, search_term):
        """Search for books by title, author, or genre."""
        results = [book for book in self.books.values() if search_term.lower() in book.title.lower() 
                   or search_term.lower() in book.author.lower() or search_term.lower() in book.genre.lower()]
        if results:
            print("Search results:")
            for book in results:
                print(book)
        else:
            print("No books found matching the search term.")

    def display_books(self):
        """Display all books in the library."""
        if not self.books:
            print("No books available in the library.")
        else:
            print("Library Books:")
            for book in self.books.values():
                print(book)

    def sort_books(self, by="title"):
        """Sort books by a specified attribute."""
        try:
            if by not in ["title", "author", "genre"]:
                raise ValueError("Invalid sort option. Use 'title', 'author', or 'genre'.")

            sorted_books = sorted(self.books.values(), key=lambda x: getattr(x, by).lower())
            print(f"Books sorted by {by}:")
            for book in sorted_books:
                print(book)
        except ValueError as e:
            print(f"Error: {e}")

# Example usage
library = Library()
library.add_book(1, "The Woman: A Novel", "Kristin Hannah", "Fiction", 5)
library.add_book(2, "James", "Percival Everett", "Fiction", 3)
library.add_book(3, "Counting Miracles: A Novel", "Nicholas Sparks", "Romance", 4)
library.register_user(101, "Olivia")
library.register_user(102, "Alexander")
library.borrow_book(101, 1)
library.display_books()
library.sort_books("author")
library.return_book(101, 1)
library.search_books("James")
